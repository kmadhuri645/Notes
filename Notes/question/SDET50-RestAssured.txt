Serialization/De-serialization

Converting java object to json file is called as serialization
parser used : jackson Mapper

public class Serialization {
	
public static void main(String[] args) throws JsonGenerationException, JsonMappingException, IOException {
		
        EmployeeDetails emp = new EmployeeDetails("Chaitra","Banglore", "chaitra@gmail.com");
		
	ObjectMapper obj = new ObjectMapper();
	obj.writeValue(new File("./Sample.json"), emp);
	}


Converting json File to java Object is called as Deserialization

public static void main(String[] args) throws JsonParseException, JsonMappingException, IOException {
		
        ObjectMapper obj = new ObjectMapper();
		
	EmployeeDetails e1 = obj.readValue(new File("./Sample.json"), EmployeeDetails.class);
		
	System.out.println(e1.getName());
	System.out.println(e1.getEmail());
	}

Java Object---XML    JAXB
Java Object---JSON   JACKSON Mapper
XML---python         Requester
JSON---python        JSON module
=================================================================================== 
Introductions to RestAssured

->Rest-Assured is a Java based library that is used to test RESTful Web Services. 
  This library behaves like a headless Client to access REST web services
->Rest Assured simple java libraries  for testing of Rest WebServcie API
->Rest-Assured library also provides ability to validate the Rest-HTTP Responses received  from server. 
  For e.g. we can verify the Status code, Status message, Headers and even the Body of the response. This makes Rest-Assured a very flexible library that can be used for testing.
->It support both  XML and JSON 

====================================================================================
Class Diagram of RestAssured
====================================================================================
CRUD Operations without BDD

=> Create => POST() => 201
public void createProjectTest()
    {
	//Step 1: Create the pre requisites - request Body
	JSONObject jObj = new JSONObject();
	jObj.put("createdBy", "sachin");
	jObj.put("projectName", "Xylem1");
	jObj.put("status", "Completed");
	jObj.put("teamSize", 12);
		


	RequestSpecification req = RestAssured.given();
	req.body(jObj);
	req.contentType(ContentType.JSON);
		
	//Step 2: Perform the Action
		
	Response response = req.post("http://rmgtestingserver:8084/addProject");
		
	//Step 3: Validate the response
	System.out.println(response.getContentType());
	System.out.println(response.asString());
	System.out.println(response.prettyPrint());
	System.out.println(response.prettyPeek());
    }

=> Read => GET() => 200

public void getAllProjects()
   {
	 //Step 1: Create a pre requisite
	//Step 2: Perform the actiomn
	Response resp = RestAssured.get("http://rmgtestingserver:8084/projects");
		
	//Step 3: Provide Validation
	resp.then().log().all();
	int actStatus = resp.getStatusCode();
	Assert.assertEquals(200, actStatus);
   }

=> Update => PUT() => 200

public void updateProject()
	{
		//Step1: create pre requisites
		JSONObject jObj = new JSONObject();
		jObj.put("createdBy", "sachin");
		jObj.put("projectName", "Xylem1");
		jObj.put("status", "Completed");
		jObj.put("teamSize", 15);
		
		RequestSpecification req = RestAssured.given();
		req.body(jObj);
		req.contentType(ContentType.JSON);
		
		//Step2: perform action
		Response resp = req.put("http://rmgtestingserver:8084/projects/TY_PROJ_3203");
		
		//Step 3: Validation
		resp.then().log().all();
		int actStatus = resp.getStatusCode();
		Assert.assertEquals(actStatus, 200);
	}

=> Delete => DELETE() => 204

public void deleteProject()
	{
		//Step 1: Create Prerequities
		//STep 2: Perform Action
		Response resp = RestAssured.delete("http://rmgtestingserver:8084/projects/TY_PROJ_1604");
		
		//Step3: validate
		resp.then().log().all();
		int actStatus = resp.getStatusCode();
		Assert.assertEquals(actStatus, 204);
	}


Disadvantages:
-> Unneccessary variables are used to store the data
=======================================================================================
CRUD Operations with BDD

-given() -> Preconditions
-when() -> Actual Actions
-then() -> Validations
-With the help of method Chaining Unnccessary variable usage can be reduced

=> Create => POST() => 201

public void createProject()
	{
		JavaLibrary jLib = new JavaLibrary();
		
		//Step 1: craete pre requisite

		JSONObject jObj = new JSONObject();
		jObj.put("createdBy", "mithun");
		jObj.put("projectName", "Xylem "+jLib.getRandomNumber());
		jObj.put("status", "Completed");
		jObj.put("teamSize", 12);
		
		baseURI ="http://rmgtestingserver";
		port = 8084;
		
		given()
		 .body(jObj)
		 .contentType(ContentType.JSON)
		
		.when()  //Step 2: perform action
		 .post("/addProject")
		 
		.then()  //Step 3: Validation
		 .assertThat()
		 .statusCode(201)
		 .contentType(ContentType.JSON)
		 .log().all();


=> Read => GET() => 200

public void getAllProjects()
	{
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		when()
		 .get("/projects")
		.then()
		 .log().all();
	}


=> Update => PUT() => 200

public void updateProject()
	{
		
		//Step 1: Create the pre requisites - request Body
		JSONObject jObj = new JSONObject();
		jObj.put("createdBy", "sumith");
		jObj.put("projectName", "Xylem11234");
		jObj.put("status", "Completed");
		jObj.put("teamSize", 30);
		
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		given()
		 .body(jObj)
		 .contentType(ContentType.JSON)

		.when()
		 .put("/projects/TY_PROJ_3205")
		 
		.then()
		 .assertThat()
		 .statusCode(200)
		 .contentType(ContentType.JSON)
		 .log().all();
	}



=> Delete => DELETE() => 204

public void deleteProject()
	{
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		when()
		 .delete("/projects/TY_PROJ_3205")
		.then()
		 .assertThat()
		 .statusCode(204)
		 .log().all();
	}

======================================================
Different ways to POST a request

=> Using JSON Object:-

public class CreateProjectUsingJSONObject {
	
	@Test
	public void createProject()
	{
		JavaLibrary jLib = new JavaLibrary();
		
		//Step 1: create pre requisites
		JSONObject jObj = new JSONObject();
		jObj.put("createdBy", "Prakash");
		jObj.put("projectName", "Allstates "+jLib.getRandomNumber());
		jObj.put("status", "Completed");
		jObj.put("teamSize", 100);
		
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		given()
		 .body(jObj)
		 .contentType(ContentType.JSON)
		 
		.when()
		 .post("/addProject")
		 
		.then()
		 .assertThat()
		 .statusCode(201)
		 .log().all();
}

=> Using HashMap:-

public class CreateProjectUsingHashMap {
	
	@Test
	public void createProject()
	{
		JavaLibrary jLib = new JavaLibrary();
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		//Step 1: create pre requisites 
		HashMap map = new HashMap();
		map.put("createdBy", "Chandan");
		map.put("projectName", "Sony "+jLib.getRandomNumber());
		map.put("status", "Created");
		map.put("teamSize", 4);
		
		given()
		 .body(map)
		 .contentType(ContentType.JSON)
		 
		.when()
		 .post("/addProject")
		 
		.then()
		 .assertThat().statusCode(201)
		 .log().all();
}

=> Using JSON File:- disadvantages of json File is: we cannot append random number

public class CreateProjectUsingJSONfile {
	
	@Test
	public void createProject()
	{
		//Step 1: create pre requisites
		File file = new File(".\\Data.json");
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		given()
		 .body(file)
		 .contentType(ContentType.JSON)
		.when()                        //Step 2: perform Action
		 .post("/addProject")
		.then()                       //Step 3: Validation
		 .assertThat().statusCode(201)
		 .log().all();
	
	}


=> Using POJO CLASS:-
-> pojo stands of plain old java Object 
-> which is used to create java object for serialization and deserialization
-> Steps to create pojo
   1. Declare the required key variables globally
   2. Create a constructor to initialise these variables
   3. Provide getters and setters to access these variables

-> POJO Class should be created in src/main/java folder => 

package name: projectLibrary 
Class Name: ProjectLibrary


public class ProjectLibrary {
	
	//Step 1: create the keys as global variables
	String createdBy;
	String projectName;
	String status;
	int teamSize;
	
	//Step 2: create a constructor to initialise the variables
	public ProjectLibrary(String createdBy, String projectName, String status, int teamSize) {
		this.createdBy = createdBy;
		this.projectName = projectName;
		this.status = status;
		this.teamSize = teamSize;
	}
	
	//Step 3: Provide getters and setters to access the variables
	public String getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	public String getProjectName() {
		return projectName;
	}

	public void setProjectName(String projectName) {
		this.projectName = projectName;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public int getTeamSize() {
		return teamSize;
	}

	public void setTeamSize(int teamSize) {
		this.teamSize = teamSize;
	}


=> Create request using POJO

public class CreateProjectUsingPOJO {
	
	@Test
	public void createProject()
	{
		JavaLibrary jLib = new JavaLibrary();
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		//Step 1: create pre requisites
		ProjectLibrary pLib = new ProjectLibrary("Harendra", "Google "+jLib.getRandomNumber(), "Completed", 0);
		
		given()
		 .body(pLib)
		 .contentType(ContentType.JSON)
		.when()                          //Step 2: perform action
		 .post("/addProject")
		.then()                          //Step 3: validation
		 .assertThat().statusCode(201)
		 .log().all();
		
		
		
	}

=====================================================================================
Questions: How do you post complex request in rest Assured?
         
           -> POJO Class - recommended

=======================================================================================
Response Validation

-> For every request, response has to be validated in order to check the correctness of 
   server response

-> Rest assured also provides assertions as a inbuilt method in ValidatableResponse interface
   then().assertThat() for response header validation

-> Response Header validation:-
   Status code and ContentType can be validated with the help of inbuild methods
   then().assertThat().statusCode(exp Status code)
   then().assertThat().ContentType(Exp ContentType)

-> Response Body Validation:-
   response body has to be validated with the help of json path
   response.jsonPath().get(json path for the required data in response)

There are 2 types of response body validations:---

=> Static Response validation:- when we know where exactly the required data is present 
   in response we use static response
   -> static response always return single value
   -> static response always uses index
   
   public class StaticResponseValidationGet {
	
	@Test
	public void staticResponseGet()
	{
		//prerequisites
		String expData = "TY_PROJ_1002";
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		//action
		Response resp = when().get("/projects");
		
		//validation
		String actData = resp.jsonPath().get("[1].projectId");
		Assert.assertEquals(actData, expData);
		System.out.println("data verfied ");
		
		resp.then().log().all();
	}

=> Dynamic Response Validation:- When we dont know where exactly the data is present in 
   the response we use dynamic response
   -> Dynamic response cannot use index
   -> Dynamic response always return a collection (multiple values)

   public class DynamicResponseValidation {
	
	@Test
	public void dynamicResponse()
	{
		
		String expData = "TY_PROJ_3035";
		
		Response resp = when().get("/projects");
		
		boolean flag = false;
		
                List<String> pIDs = resp.jsonPath().get("projectId");
		
                for(String projectID : pIDs)
		{
			if(projectID.equalsIgnoreCase(expData))
			{
				flag = true;
			}
		}
		
		Assert.assertTrue(flag);
		System.out.println("data verfied");
		
		resp.then().log().all();
	}

=> Response time Validation:-
->In order to validate response time there are no inbuilt methods in restassured where we can specify the range of values like lessThan() or greaterThan()
->Hence we use HAMCREST Matchers to validate response TIME

<!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest -->
<dependency>
    <groupId>org.hamcrest</groupId>
    <artifactId>hamcrest</artifactId>
    <version>2.2</version>
    <scope>test</scope>
</dependency>


public class ResponseTimeValidation {
	
	@Test
	public void responseTimeValidation()
	{
		//prerequisites
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		//Action
		when()
		 .get("/projects")
		 
		//validation
		.then()
		  .assertThat().time(Matchers.lessThan(50L),TimeUnit.MILLISECONDS)
		  .log().all();
		 
	}

==============================================================================
Question:-- How do u handle/validate complex response?
            by writing json path             
            use jsonPath() from response interface

============================================================================================
Data Driven Testing in RestAssured

=> Use Dataprovider and POJO Class
=> Create multiple projects with different set of Data - same request with different testdata

public class CreateMultipleProjectWithDiffData {
	Run 
	@Test(dataProvider = "getData")
	
         public void createProject(String createdBy, String projectName, String status, int teamSize)
	{
		
		//Prerequisties
		JavaLibrary jLib = new JavaLibrary();
		ProjectLibrary pLib = new ProjectLibrary(createdBy, projectName+jLib.getRandomNumber(), status, teamSize);
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		
		given()
		 .body(pLib)
		 .contentType(ContentType.JSON)
	   
		//Actions
		.when()
		 .post("/addProject")
		 
		//Validation
		.then().log().all();		
	}
	
	
	@DataProvider(name = "getData")
	public Object[][] data()
	{
		Object[][] data = new Object[3][4];
		
		data[0][0] = "suresh";
		data[0][1] = "Dell";
		data[0][2] = "Completed";
		data[0][3] = 12;
		
		data[1][0] = "Vijay";
		data[1][1] = "HP";
		data[1][2] = "Created";
		data[1][3] = 15;
		
		data[2][0] = "Pavan";
		data[2][1] = "TYSS";
		data[2][2] = "On Going";
		data[2][3] = 20;
		
		
		return data;
	}

======================================================================================
Parameters in API

-> Path parameter: parameter associated with resource path in Web URL 
                   same request with different endpoints
                   path parameter is represented using single curly braces - {}
                   In API Document it will given as (path)


public class PathParameter {
	
	@Test
	public void getSingleProject()
	{
		//Pre requisites
		baseURI ="http://rmgtestingserver";
		port = 8084;			
		
		given()
	      .pathParam("pid", "TY_PROJ_3215")
	      
		//Actions
	    .when()
	      .get("/projects/{pid}")
		
		//Validations
	     .then()
	      .log().all();
	}

    
-> Query parameter : parameter associated with query string in Web URL
                     same request with different search/filter criterias
                     query parameter is started using question mark ?
                     In API Document it will given as (query) 

public class QueryParameter {
	
	@Test
	public void queryParameter()
	{
	    baseURI = "https://reqres.in";
	    
	    given()
	     .queryParam("page", 3)
	     
	    .when()
	     .get("/api/users")
	     
	    .then()
	     .log().all();
	}


=> Form Parameter -> associated with request body/form data
                     execute same request with different form data

sample parameters for github apis

public class ParametersTestForGIt 
        {
	
	@Test
	public void parametersTest()
	{
		baseURI ="https://api.github.com";
		
		given()
		 .formParam("username", "Chaitra9632")
		 .formParam("per_page", 30)
		 
		.when()
		 .get("/users/{username}/repos")
		 
		.then().assertThat().statusCode(200).log().all();
	}


============================================================================================
Request Chaining:-
 
Capturing the data from one response and providing it as a parameter or variable or input to another request is called as request Chaining.

-> It will avoid dependencies with existing data,
-> For every dependent request like GET(), PUT(), PATCH(), DELETE(), we can create the data
   using POST() and then we can perform the required action.

public class CreateProjectAndGetProject {
	
	@Test
	public void requestChaining1()
	{

		ProjectLibrary pLib = new ProjectLibrary("vinay", "Firefox ", "Completed", 24);

		Response resp = given().body(pLib).contentType(ContentType.JSON)
		                
                               .when().post("/addProject");
		
		
		String proId = resp.jsonPath().get("projectId");
	
		resp.then().log().all();
		
		
		given().pathParam("pid", proId)
		.when().get("/projects/{pid}")
		.then().assertThat().statusCode(200).log().all();	 
		
	}

Chaining multiple APIs in the execution order is called API sequencing/ API Call Sequencing


=====================================================================================

Authentication 

json is less secured compared to xml hence all RESTFul webservices/APIs have to adhere  to authentication protocol.

          Authorization               Authentication
          what you can do?              Who are You?
               
What is Authentication? 

authentication is the process of verifying who someone is, whereas 
authorization is the process of verifying what specific applications, files, and data a user has access to.

-> Basic Auth -> Username and password
              -> not secured as username and passowrd can be shared and remembered

public class BasicAuth {
	
	@Test
	public void basicAuth()
	{
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		given()
		 .auth().basic("rmgyantra", "rmgy@9999")
		 
		.when()
		 .get("/login")
		 
		.then()
		 .assertThat().statusCode(202).log().all();
	}
	
	
	@Test
	public void basicPreEmptiveAuth()
	{
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		given()
		 .auth().preemptive().basic("rmgyantra", "rmgy@9999")
		 
		 .when()
		 .get("/login")
		 
		.then()
		 .assertThat().statusCode(202).log().all();
	}
	
	@Test
	public void basicDigestiveAuth()
	{ 
		baseURI = "http://rmgtestingserver";
		port = 8084;
		
		given()
		 .auth().digest("rmgyantra", "rmgy@9999")
		 
		 .when()
		 .get("/login")
		 
		.then()
		 .assertThat().statusCode(202).log().all();
	}

-> Bearer Token:-  
   - Bearer token is generated with the help of username and password
   - Token is in non readable format
   - Token can be shared - disadvantage
   - Token is given by API developer 
   - Token can be generated and used multiple times
   - Token can be used untill its expired or untill the API developer changes it
   - Its secured compared to basic Auth.


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
base URI -> https://api.github.com
Endpoint -> /user/repos

request Body -> {
                 "name":"SDET50-BEARERREST",
                 "description":"Rest in peace"
                }

public class BearerToken {
	
	@Test
	public void bearerToken()
	{
		baseURI ="https://api.github.com";
		JSONObject jObj = new JSONObject();
		jObj.put("name", "sdet50-restAssured");
		
		given()
		 .auth()
		 .oauth2("ghp_KZS35xYUfqJsAmMiBBm5012Wkhh2mGL2S6uMV")
		 .body(jObj)
		 .contentType(ContentType.JSON)
		 
	    .when()
	     .post("/user/repos")
	     
	    .then().log().all();
}

-> Oauth 1.0 -> Its a authentication standard
             -> It provides 2 level security 
             -> API developer will share Client ID and Client Secret 
             -> With the help client id and client secret a third party application/
                  oauth App will generate a access Token 
             -> This access Token is valid only for few mins 
             -> For every execution new token is generated

-> Oauth 2.0 :-
  - Its a Authentication standard
  - It Provides one level security
  - API developer will give Client ID and Client Secret
  - With the help of client Id and Client secret, Oauth/Client APP( third party app to generate
    access token) will generate the access/bearer Token
  - Through this access token we can access the API
  - Access token will be valid to a stipulated amount of time(mins)
  - It acts like a OTP

==========================================================================================
RestAssured Framework:
Single Hybrid framework is used to automate both UI and API testcases.
Folder structure:
src/main/java
-> GenericUtilities - package
   - BaseClass
   - BaseAPIClass ------------RestFW
   - WebDRiverUtilitity
   - RestAssuredLibrary -------RestFW
   - JavaUtility
   - ExcelUtility
   - FileUtility
   - DatabaseUtility
   - ListnerImp
   - RetryAnalyserImp
   - Iconstants - I --------AppUserName, AppPassword , token -----RestFw
   - EndPointsLibrary -I -------endpoints -----RestFW
  
-> ObjectRepository - package
   - Loginpage
   - HomePage
   - OrganizationsPage
   - CreateOrgPage
   - OrgInfopage

-> PojoLibrary - package
   - ProjectLibrary
   - EmployeeLibrary
   - BasicErrorLibrary
   - AuthenticationLibrary

src/main/resources
-> ChromeDriver.exe
-> GeckoDriver.exe
-> IEDriver.exe

src/test/java
-> OrganizationTests - package
   - CreateOrgTest
   - CreateOrgWithIndustryTypeTest
-> ContactTests- package
-> ProductTests - package
-> LeadsTests - package
-> ProjectsTests - Package - UI - API
   - CreateProjectAPITest
   - CreateProjectUITest
-> APITests - packages


src/test/resources
-> TestData.xlsx
-> commonData.properties
-> requestData.json

ScreenShots - Folder
ExtentReports - Folder

===================================================

Exceptions

1.RestAssuredException:
  Happens when there's a general problem with the request or response in RestAssured.

2.NoSuchMethodErrorException:
  Occurs when you try to call a method that doesn't exist in the version of RestAssured you are using.

3.IllegalArgumentException:
  Thrown when you pass an invalid argument to a method, like the wrong type or format.

4.HamcrestMatcherException:
  Occurs when you use a matcher incorrectly, such as using one that doesn’t fit the API defined in your Swagger document.

5.MethodMatcherException: 
  Happens when you try to call a method with the wrong arguments.(wrong end points)

==============================================================================================================================

JSON Schema validation in Rest Assured is a powerful way to ensure the structure of your JSON responses in your API tests.
(TRP)
{
  "type": "object",
  "required": ["patientName", "age", "bloodgroup"]
  "properties": 
      {
    "patientName": 
        {
      "type": "string"
        },
    "age": 
        {
      "type": "integer"
        },
    "bloodgroup": 
        {
      "type": "string",
        }
      },
  "additionalProperties": true
}

==============================================================================================================================

